{
  "address": "0xbEeCB9EF39c565d4683d50d35420EFA4e27e002d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__ExchangeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__InsufficientAmountSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__InsufficientPriceSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotForSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__OwnerCantBuy",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approvedOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "name": "MarketItemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "createNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exchangeNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfSoldNfts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listedItemsForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NftMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myListedNfts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NftMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myNftsPurchased",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NftMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "relistNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeFromListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x92e72f12960ccebbeec4dfd5fdfe9e943c8b29b55bee06c2ed225e8d39b5a7c7",
  "receipt": {
    "to": null,
    "from": "0xa9Cad69a23C4404e03F08CA481ea13ea9567aAdd",
    "contractAddress": "0xbEeCB9EF39c565d4683d50d35420EFA4e27e002d",
    "transactionIndex": 34,
    "gasUsed": "3637995",
    "logsBloom": "0x
    "blockHash": "0x210e64d409db0ef912c9c63fa31d80406533f574399fb1110713f23296b21e1d",
    "transactionHash": "0x92e72f12960ccebbeec4dfd5fdfe9e943c8b29b55bee06c2ed225e8d39b5a7c7",
    "logs": [],
    "blockNumber": 5386736,
    "cumulativeGasUsed": "9802211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0837f52673c95a123de5cc90144c13db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__ExchangeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__InsufficientAmountSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__InsufficientPriceSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotForSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__OwnerCantBuy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"name\":\"MarketItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"createNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfSoldNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listedItemsForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NftMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myListedNfts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NftMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myNftsPurchased\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NftMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"relistNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeFromListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketPlace.sol\":\"NftMarketPlace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/NftMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\nerror NftMarketPlace__NotOwner();\\r\\nerror NftMarketPlace__InsufficientAmount();\\r\\nerror NftMarketPlace__InsufficientPriceSet();\\r\\nerror NftMarketPlace__NowOwner();\\r\\nerror NftMarketPlace__InsufficientAmountSent();\\r\\nerror NftMarketPlace__NotForSale();\\r\\nerror NftMarketPlace__ExchangeFailed();\\r\\nerror NftMarketPlace__OwnerCantBuy();\\r\\n\\r\\ncontract NftMarketPlace is ERC721URIStorage {\\r\\n    // EVENTS\\r\\n    event MarketItemCreated(\\r\\n        uint256 tokenId,\\r\\n        address indexed creator,\\r\\n        address indexed approvedOwner,\\r\\n        uint256 indexed price,\\r\\n        bool sold\\r\\n    );\\r\\n\\r\\n    // VARIABLES\\r\\n    address private immutable i_owner;\\r\\n    uint256 private currentTokenId;\\r\\n    uint256 private s_soldNfts;\\r\\n    uint256 private listingPrice;\\r\\n    mapping(uint256 => MarketItem) tokenIdToMarketItem;\\r\\n\\r\\n    // MODIFIER\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert NftMarketPlace__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // STRUCT\\r\\n    struct MarketItem {\\r\\n        uint256 tokenId; // id of the token\\r\\n        address seller; // seller of the token (initially the minter)\\r\\n        address owner; // current owner initially 0 then setApproval to us then create exchange after exchange set to 0 again\\r\\n        uint256 price; // price to be sold at in WEI\\r\\n        bool sold; // sold or not\\r\\n    }\\r\\n\\r\\n    // CONSTRUCTOR\\r\\n    constructor() ERC721(\\\"VR Art Tokens\\\", \\\"ENMA\\\") {\\r\\n        i_owner = msg.sender;\\r\\n        currentTokenId = 1;\\r\\n        s_soldNfts = 0;\\r\\n        listingPrice = 0.02 ether;\\r\\n    }\\r\\n\\r\\n    // MAIN FUNCTIONS\\r\\n\\r\\n    // CREATE NFT AND LIST INTO MARKETPLACE\\r\\n    function createNft(\\r\\n        uint256 price,\\r\\n        string memory tokenUri\\r\\n    ) external payable returns (uint256) {\\r\\n        if (msg.value < listingPrice) {\\r\\n            revert NftMarketPlace__InsufficientAmount();\\r\\n        }\\r\\n        if (price <= 0) {\\r\\n            revert NftMarketPlace__InsufficientPriceSet();\\r\\n        }\\r\\n        _safeMint(msg.sender, currentTokenId); // create the token\\r\\n        _setTokenURI(currentTokenId, tokenUri); // ipfs data\\r\\n        tokenIdToMarketItem[currentTokenId] = MarketItem(\\r\\n            currentTokenId,\\r\\n            msg.sender,\\r\\n            address(0x0),\\r\\n            price,\\r\\n            true\\r\\n        );\\r\\n        currentTokenId = currentTokenId + 1;\\r\\n        listItemToMarketPlace(currentTokenId - 1, price, msg.sender);\\r\\n        return currentTokenId - 1;\\r\\n    }\\r\\n\\r\\n    // LIST THE NFT INTO THE MARKETPLACE\\r\\n    function listItemToMarketPlace(\\r\\n        uint256 tokenId,\\r\\n        uint256 price,\\r\\n        address seller\\r\\n    ) private {\\r\\n        if (price <= 0) {\\r\\n            revert NftMarketPlace__InsufficientPriceSet();\\r\\n        }\\r\\n        tokenIdToMarketItem[tokenId] = MarketItem(\\r\\n            tokenId,\\r\\n            seller, // THE ONE WHO CALLED MINT FUNCTION OR RELIST FUNCTION\\r\\n            address(this), // SET TO THE CONTRACT ADDRESS\\r\\n            price,\\r\\n            false\\r\\n        );\\r\\n        approve(address(this), tokenId); // APPROVED TO BE SOLD\\r\\n        emit MarketItemCreated(\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            price,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // RESLIST THE NFT TO SALE THAT YOU BOUGHT AND YOU CAN ALSO USE THIS TO UPDATE THE PRICE OF THE NFT\\r\\n    function relistNft(\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    ) external payable returns (uint256) {\\r\\n        if (ownerOf(tokenId) != msg.sender) {\\r\\n            revert NftMarketPlace__NotOwner();\\r\\n        }\\r\\n        if (msg.value < listingPrice) {\\r\\n            revert NftMarketPlace__InsufficientAmount();\\r\\n        }\\r\\n        listItemToMarketPlace(tokenId, price, msg.sender);\\r\\n        s_soldNfts = s_soldNfts - 1;\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    // SELL THE NFT AND GET MONEY\\r\\n    function exchangeNft(uint256 tokenId) external payable {\\r\\n        if (_ownerOf(tokenId) == msg.sender) {\\r\\n            revert NftMarketPlace__OwnerCantBuy();\\r\\n        }\\r\\n        MarketItem memory curItem = tokenIdToMarketItem[tokenId];\\r\\n        if (curItem.sold == true) {\\r\\n            revert NftMarketPlace__NotForSale();\\r\\n        }\\r\\n        if (msg.value < curItem.price) {\\r\\n            revert NftMarketPlace__InsufficientAmountSent();\\r\\n        }\\r\\n        tokenIdToMarketItem[tokenId].sold = true;\\r\\n        this.safeTransferFrom(curItem.seller, msg.sender, tokenId);\\r\\n        s_soldNfts = s_soldNfts + 1;\\r\\n        address previousOwner = curItem.seller;\\r\\n        tokenIdToMarketItem[tokenId].seller = msg.sender;\\r\\n        tokenIdToMarketItem[tokenId].owner = address(0x0);\\r\\n        (bool callSuccess1, ) = payable(i_owner).call{value: listingPrice}(\\\"\\\");\\r\\n        if (callSuccess1 == false) {\\r\\n            revert NftMarketPlace__ExchangeFailed();\\r\\n        }\\r\\n        (bool callSuccess2, ) = payable(previousOwner).call{value: msg.value}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        if (callSuccess2 == false) {\\r\\n            revert NftMarketPlace__ExchangeFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // REMOVE NFT FROM BEING LISTED ON MARKETPLACE\\r\\n    function removeFromListing(uint256 tokenId) external {\\r\\n        if (ownerOf(tokenId) != msg.sender) {\\r\\n            revert NftMarketPlace__NotOwner();\\r\\n        }\\r\\n        MarketItem memory curItem = tokenIdToMarketItem[tokenId];\\r\\n        if (curItem.sold == true) {\\r\\n            revert NftMarketPlace__NotForSale();\\r\\n        }\\r\\n        tokenIdToMarketItem[tokenId].sold = true;\\r\\n        tokenIdToMarketItem[tokenId].owner = address(0x0);\\r\\n        (bool callSuccess1, ) = payable(i_owner).call{value: listingPrice}(\\\"\\\");\\r\\n        if (callSuccess1 == false) {\\r\\n            revert NftMarketPlace__ExchangeFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // RETURNS THE ARRAY OF NFTS KEPT FOR SALE\\r\\n    function listedItemsForSale() public view returns (MarketItem[] memory) {\\r\\n        uint256 unsoldItems = currentTokenId - 1 - s_soldNfts;\\r\\n        MarketItem[] memory tobeReturnedItems = new MarketItem[](unsoldItems);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint i = 1; i < currentTokenId; i++) {\\r\\n            if (\\r\\n                tokenIdToMarketItem[i].sold == false &&\\r\\n                tokenIdToMarketItem[i].owner == address(this)\\r\\n            ) {\\r\\n                // not sold and kept for sale\\r\\n                tobeReturnedItems[currentIndex] = tokenIdToMarketItem[i];\\r\\n                currentIndex = currentIndex + 1;\\r\\n            }\\r\\n        }\\r\\n        return tobeReturnedItems;\\r\\n    }\\r\\n\\r\\n    // RETURNS THE ARRAY OF NFTS THAT ARE BOUGHT BY ME AND NOT RELISTED BY ME\\r\\n    function myNftsPurchased() public view returns (MarketItem[] memory) {\\r\\n        uint256 itemCount = 0;\\r\\n        for (uint i = 1; i < currentTokenId; i++) {\\r\\n            if (\\r\\n                tokenIdToMarketItem[i].sold == true &&\\r\\n                tokenIdToMarketItem[i].seller == msg.sender\\r\\n            ) {\\r\\n                itemCount = itemCount + 1;\\r\\n            }\\r\\n        }\\r\\n        uint256 currentIndex = 0;\\r\\n        MarketItem[] memory tobeReturnedItems = new MarketItem[](itemCount);\\r\\n        for (uint i = 1; i < currentTokenId; i++) {\\r\\n            if (\\r\\n                tokenIdToMarketItem[i].sold == true &&\\r\\n                tokenIdToMarketItem[i].seller == msg.sender\\r\\n            ) {\\r\\n                tobeReturnedItems[currentIndex] = tokenIdToMarketItem[i];\\r\\n                currentIndex = currentIndex + 1;\\r\\n            }\\r\\n        }\\r\\n        return tobeReturnedItems;\\r\\n    }\\r\\n\\r\\n    // RETURNS THE NFTS THAT ARE KEPT FOR SALE BY SPECIFIC USER\\r\\n    function myListedNfts() public view returns (MarketItem[] memory) {\\r\\n        uint256 itemCount = 0;\\r\\n        for (uint i = 1; i < currentTokenId; i++) {\\r\\n            if (\\r\\n                tokenIdToMarketItem[i].sold == false &&\\r\\n                tokenIdToMarketItem[i].seller == msg.sender\\r\\n            ) {\\r\\n                itemCount = itemCount + 1;\\r\\n            }\\r\\n        }\\r\\n        uint256 currentIndex = 0;\\r\\n        MarketItem[] memory tobeReturnedItems = new MarketItem[](itemCount);\\r\\n        for (uint i = 1; i < currentTokenId; i++) {\\r\\n            if (\\r\\n                tokenIdToMarketItem[i].sold == false &&\\r\\n                tokenIdToMarketItem[i].seller == msg.sender\\r\\n            ) {\\r\\n                tobeReturnedItems[currentIndex] = tokenIdToMarketItem[i];\\r\\n                currentIndex = currentIndex + 1;\\r\\n            }\\r\\n        }\\r\\n        return tobeReturnedItems;\\r\\n    }\\r\\n\\r\\n    // GETTER FOR LISTING PRICE\\r\\n    function getListingPrice() public view returns (uint256) {\\r\\n        return listingPrice;\\r\\n    }\\r\\n\\r\\n    // SETTER FOR LISTING PRICE IN WEI\\r\\n    function setListingPrice(uint256 price) public onlyOwner {\\r\\n        if (price <= 0) {\\r\\n            revert NftMarketPlace__InsufficientAmount();\\r\\n        }\\r\\n        listingPrice = price;\\r\\n    }\\r\\n\\r\\n    // GETTER FOR TOTAL NFTS SOLD BY THE CONTRACT\\r\\n    function getNumberOfSoldNfts() public view returns (uint256) {\\r\\n        return s_soldNfts;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36451f1a835d2917c3b6c4d8c9c2e14831a54187bd4049d2a8bec2803ffd63a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040518060400160405280600d81526020017f56522041727420546f6b656e73000000000000000000000000000000000000008152506040518060400160405280600481526020017f454e4d410000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000376565b508060019081620000a1919062000376565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506001600781905550600060088190555066470de4df8200006009819055506200045d565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200017e57607f821691505b60208210810362000194576200019362000136565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001bf565b6200020a8683620001bf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000257620002516200024b8462000222565b6200022c565b62000222565b9050919050565b6000819050919050565b620002738362000236565b6200028b62000282826200025e565b848454620001cc565b825550505050565b600090565b620002a262000293565b620002af81848462000268565b505050565b5b81811015620002d757620002cb60008262000298565b600181019050620002b5565b5050565b601f8211156200032657620002f0816200019a565b620002fb84620001af565b810160208510156200030b578190505b620003236200031a85620001af565b830182620002b4565b50505b505050565b600082821c905092915050565b60006200034b600019846008026200032b565b1980831691505092915050565b600062000366838362000338565b9150826002028217905092915050565b6200038182620000fc565b67ffffffffffffffff8111156200039d576200039c62000107565b5b620003a9825462000165565b620003b6828285620002db565b600060209050601f831160018114620003ee5760008415620003d9578287015190505b620003e5858262000358565b86555062000455565b601f198416620003fe866200019a565b60005b82811015620004285784890151825560018201915060208501945060208101905062000401565b8683101562000448578489015162000444601f89168262000338565b8355505b6001600288020188555050505b505050505050565b608051613f246200048760003960008181610a0101528181610b9c0152611cc90152613f246000f3fe6080604052600436106101405760003560e01c806382862abe116100b6578063c87b56dd1161006f578063c87b56dd1461045a578063df73106614610497578063e13d899c146104c7578063e985e9c5146104f2578063ebddf9d71461052f578063edf7cf9b1461054b57610140565b806382862abe1461035c57806395d89b4114610387578063a22cb465146103b2578063a4ee9afd146103db578063b88d4fde14610406578063b9affbce1461042f57610140565b806323b872dd1161010857806323b872dd1461023e57806342842e0e146102675780635b9d252d146102905780636352211e146102b957806370a08231146102f65780637c726b691461033357610140565b806301ffc9a71461014557806306fdde0314610182578063081812fc146101ad578063095ea7b3146101ea57806312e8558514610213575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906130e1565b61057b565b6040516101799190613129565b60405180910390f35b34801561018e57600080fd5b506101976105dc565b6040516101a491906131d4565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061322c565b61066e565b6040516101e1919061329a565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906132e1565b61068a565b005b34801561021f57600080fd5b506102286106a0565b6040516102359190613330565b60405180910390f35b34801561024a57600080fd5b506102656004803603810190610260919061334b565b6106aa565b005b34801561027357600080fd5b5061028e6004803603810190610289919061334b565b6107ac565b005b34801561029c57600080fd5b506102b760048036038101906102b2919061322c565b6107cc565b005b3480156102c557600080fd5b506102e060048036038101906102db919061322c565b610ace565b6040516102ed919061329a565b60405180910390f35b34801561030257600080fd5b5061031d6004803603810190610318919061339e565b610ae0565b60405161032a9190613330565b60405180910390f35b34801561033f57600080fd5b5061035a6004803603810190610355919061322c565b610b9a565b005b34801561036857600080fd5b50610371610c63565b60405161037e919061350f565b60405180910390f35b34801561039357600080fd5b5061039c610f77565b6040516103a991906131d4565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d4919061355d565b611009565b005b3480156103e757600080fd5b506103f061101f565b6040516103fd9190613330565b60405180910390f35b34801561041257600080fd5b5061042d600480360381019061042891906136d2565b611029565b005b34801561043b57600080fd5b50610444611046565b604051610451919061350f565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c919061322c565b6112ad565b60405161048e91906131d4565b60405180910390f35b6104b160048036038101906104ac91906137f6565b6113c0565b6040516104be9190613330565b60405180910390f35b3480156104d357600080fd5b506104dc6115c8565b6040516104e9919061350f565b60405180910390f35b3480156104fe57600080fd5b5061051960048036038101906105149190613852565b6118dc565b6040516105269190613129565b60405180910390f35b6105496004803603810190610544919061322c565b611970565b005b61056560048036038101906105609190613892565b611e42565b6040516105729190613330565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d557506105d482611f16565b5b9050919050565b6060600080546105eb90613901565b80601f016020809104026020016040519081016040528092919081815260200182805461061790613901565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050905090565b600061067982611ff8565b5061068382612080565b9050919050565b61069c82826106976120bd565b6120c5565b5050565b6000600954905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361071c5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610713919061329a565b60405180910390fd5b6000610730838361072b6120bd565b6120d7565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107a6578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161079d93929190613932565b60405180910390fd5b50505050565b6107c783838360405180602001604052806000815250611029565b505050565b3373ffffffffffffffffffffffffffffffffffffffff166107ec82610ace565b73ffffffffffffffffffffffffffffffffffffffff1614610839576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600115158160800151151503610978576040517f27a8bf7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600a600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600954604051610a459061399a565b60006040518083038185875af1925050503d8060008114610a82576040519150601f19603f3d011682016040523d82523d6000602084013e610a87565b606091505b505090506000151581151503610ac9576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000610ad982611ff8565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b535760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610b4a919061329a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1f576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008111610c59576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060098190555050565b6060600080600190505b600754811015610d315760001515600a600083815260200190815260200160002060040160009054906101000a900460ff161515148015610d0f57503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610d2457600182610d2191906139de565b91505b8080600101915050610c6d565b506000808267ffffffffffffffff811115610d4f57610d4e6135a7565b5b604051908082528060200260200182016040528015610d8857816020015b610d75613018565b815260200190600190039081610d6d5790505b5090506000600190505b600754811015610f6d5760001515600a600083815260200190815260200160002060040160009054906101000a900460ff161515148015610e3457503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610f6057600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050828481518110610f4557610f44613a12565b5b6020026020010181905250600183610f5d91906139de565b92505b8080600101915050610d92565b5080935050505090565b606060018054610f8690613901565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb290613901565b8015610fff5780601f10610fd457610100808354040283529160200191610fff565b820191906000526020600020905b815481529060010190602001808311610fe257829003601f168201915b5050505050905090565b61101b6110146120bd565b83836122f1565b5050565b6000600854905090565b6110348484846106aa565b61104084848484612460565b50505050565b60606000600854600160075461105c9190613a41565b6110669190613a41565b905060008167ffffffffffffffff811115611084576110836135a7565b5b6040519080825280602002602001820160405280156110bd57816020015b6110aa613018565b8152602001906001900390816110a25790505b509050600080600190505b6007548110156112a35760001515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561116a57503073ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561129657600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505083838151811061127b5761127a613a12565b5b602002602001018190525060018261129391906139de565b91505b80806001019150506110c8565b5081935050505090565b60606112b882611ff8565b5060006006600084815260200190815260200160002080546112d990613901565b80601f016020809104026020016040519081016040528092919081815260200182805461130590613901565b80156113525780601f1061132757610100808354040283529160200191611352565b820191906000526020600020905b81548152906001019060200180831161133557829003601f168201915b505050505090506000611363612617565b905060008151036113785781925050506113bb565b6000825111156113ad578082604051602001611395929190613ab1565b604051602081830303815290604052925050506113bb565b6113b68461262e565b925050505b919050565b60006009543410156113fe576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008311611438576040517f329c1f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61144433600754612697565b611450600754836126b5565b6040518060a0016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160011515815250600a600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600160075461159291906139de565b6007819055506115b160016007546115aa9190613a41565b8433612711565b60016007546115c09190613a41565b905092915050565b6060600080600190505b6007548110156116965760011515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561167457503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156116895760018261168691906139de565b91505b80806001019150506115d2565b506000808267ffffffffffffffff8111156116b4576116b36135a7565b5b6040519080825280602002602001820160405280156116ed57816020015b6116da613018565b8152602001906001900390816116d25790505b5090506000600190505b6007548110156118d25760011515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561179957503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156118c557600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250508284815181106118aa576118a9613a12565b5b60200260200101819052506001836118c291906139de565b92505b80806001019150506116f7565b5080935050505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff16611990826128f1565b73ffffffffffffffffffffffffffffffffffffffff16036119dd576040517ff840540400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600115158160800151151503611b1c576040517f27a8bf7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060600151341015611b5a576040517f3015947c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133856040518463ffffffff1660e01b8152600401611bca93929190613ad5565b600060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506001600854611c0b91906139de565b60088190555060008160200151905033600a600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600954604051611d0d9061399a565b60006040518083038185875af1925050503d8060008114611d4a576040519150601f19603f3d011682016040523d82523d6000602084013e611d4f565b606091505b505090506000151581151503611d91576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1634604051611db79061399a565b60006040518083038185875af1925050503d8060008114611df4576040519150601f19603f3d011682016040523d82523d6000602084013e611df9565b606091505b505090506000151581151503611e3b576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16611e6484610ace565b73ffffffffffffffffffffffffffffffffffffffff1614611eb1576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600954341015611eed576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ef8838333612711565b6001600854611f079190613a41565b60088190555082905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611fe157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611ff15750611ff08261292e565b5b9050919050565b600080612004836128f1565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361207757826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161206e9190613330565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6120d28383836001612998565b505050565b6000806120e3846128f1565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461212557612124818486612b5d565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146121b657612167600085600080612998565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612239576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361236257816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401612359919061329a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124539190613129565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612611578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026124a46120bd565b8685856040518563ffffffff1660e01b81526004016124c69493929190613b61565b6020604051808303816000875af192505050801561250257506040513d601f19601f820116820180604052508101906124ff9190613bc2565b60015b612586573d8060008114612532576040519150601f19603f3d011682016040523d82523d6000602084013e612537565b606091505b50600081510361257e57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612575919061329a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461260f57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612606919061329a565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b606061263982611ff8565b506000612644612617565b90506000815111612664576040518060200160405280600081525061268f565b8061266e84612c21565b60405160200161267f929190613ab1565b6040516020818303038152906040525b915050919050565b6126b1828260405180602001604052806000815250612cef565b5050565b806006600084815260200190815260200160002090816126d59190613d9b565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516127059190613330565b60405180910390a15050565b6000821161274b576040517f329c1f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808481526020018273ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600a60008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050612883308461068a565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d8660006040516128e4929190613e6d565b60405180910390a4505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b80806129d15750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612b055760006129e184611ff8565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612a4c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612a5f5750612a5d81846118dc565b155b15612aa157826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612a98919061329a565b60405180910390fd5b8115612b0357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612b68838383612d0b565b612c1c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612bdd57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612bd49190613330565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612c13929190613e96565b60405180910390fd5b505050565b606060006001612c3084612dcc565b01905060008167ffffffffffffffff811115612c4f57612c4e6135a7565b5b6040519080825280601f01601f191660200182016040528015612c815781602001600182028036833780820191505090505b509050600082602001820190505b600115612ce4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cd857612cd7613ebf565b5b04945060008503612c8f575b819350505050919050565b612cf98383612f1f565b612d066000848484612460565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612dc357508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612d845750612d8384846118dc565b5b80612dc257508273ffffffffffffffffffffffffffffffffffffffff16612daa83612080565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612e2a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612e2057612e1f613ebf565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612e67576d04ee2d6d415b85acef81000000008381612e5d57612e5c613ebf565b5b0492506020810190505b662386f26fc100008310612e9657662386f26fc100008381612e8c57612e8b613ebf565b5b0492506010810190505b6305f5e1008310612ebf576305f5e1008381612eb557612eb4613ebf565b5b0492506008810190505b6127108310612ee4576127108381612eda57612ed9613ebf565b5b0492506004810190505b60648310612f075760648381612efd57612efc613ebf565b5b0492506002810190505b600a8310612f16576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612f915760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612f88919061329a565b60405180910390fd5b6000612f9f838360006120d7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146130135760006040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161300a919061329a565b60405180910390fd5b505050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130be81613089565b81146130c957600080fd5b50565b6000813590506130db816130b5565b92915050565b6000602082840312156130f7576130f661307f565b5b6000613105848285016130cc565b91505092915050565b60008115159050919050565b6131238161310e565b82525050565b600060208201905061313e600083018461311a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317e578082015181840152602081019050613163565b60008484015250505050565b6000601f19601f8301169050919050565b60006131a682613144565b6131b0818561314f565b93506131c0818560208601613160565b6131c98161318a565b840191505092915050565b600060208201905081810360008301526131ee818461319b565b905092915050565b6000819050919050565b613209816131f6565b811461321457600080fd5b50565b60008135905061322681613200565b92915050565b6000602082840312156132425761324161307f565b5b600061325084828501613217565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328482613259565b9050919050565b61329481613279565b82525050565b60006020820190506132af600083018461328b565b92915050565b6132be81613279565b81146132c957600080fd5b50565b6000813590506132db816132b5565b92915050565b600080604083850312156132f8576132f761307f565b5b6000613306858286016132cc565b925050602061331785828601613217565b9150509250929050565b61332a816131f6565b82525050565b60006020820190506133456000830184613321565b92915050565b6000806000606084860312156133645761336361307f565b5b6000613372868287016132cc565b9350506020613383868287016132cc565b925050604061339486828701613217565b9150509250925092565b6000602082840312156133b4576133b361307f565b5b60006133c2848285016132cc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613400816131f6565b82525050565b61340f81613279565b82525050565b61341e8161310e565b82525050565b60a08201600082015161343a60008501826133f7565b50602082015161344d6020850182613406565b5060408201516134606040850182613406565b50606082015161347360608501826133f7565b5060808201516134866080850182613415565b50505050565b60006134988383613424565b60a08301905092915050565b6000602082019050919050565b60006134bc826133cb565b6134c681856133d6565b93506134d1836133e7565b8060005b838110156135025781516134e9888261348c565b97506134f4836134a4565b9250506001810190506134d5565b5085935050505092915050565b6000602082019050818103600083015261352981846134b1565b905092915050565b61353a8161310e565b811461354557600080fd5b50565b60008135905061355781613531565b92915050565b600080604083850312156135745761357361307f565b5b6000613582858286016132cc565b925050602061359385828601613548565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135df8261318a565b810181811067ffffffffffffffff821117156135fe576135fd6135a7565b5b80604052505050565b6000613611613075565b905061361d82826135d6565b919050565b600067ffffffffffffffff82111561363d5761363c6135a7565b5b6136468261318a565b9050602081019050919050565b82818337600083830152505050565b600061367561367084613622565b613607565b905082815260208101848484011115613691576136906135a2565b5b61369c848285613653565b509392505050565b600082601f8301126136b9576136b861359d565b5b81356136c9848260208601613662565b91505092915050565b600080600080608085870312156136ec576136eb61307f565b5b60006136fa878288016132cc565b945050602061370b878288016132cc565b935050604061371c87828801613217565b925050606085013567ffffffffffffffff81111561373d5761373c613084565b5b613749878288016136a4565b91505092959194509250565b600067ffffffffffffffff8211156137705761376f6135a7565b5b6137798261318a565b9050602081019050919050565b600061379961379484613755565b613607565b9050828152602081018484840111156137b5576137b46135a2565b5b6137c0848285613653565b509392505050565b600082601f8301126137dd576137dc61359d565b5b81356137ed848260208601613786565b91505092915050565b6000806040838503121561380d5761380c61307f565b5b600061381b85828601613217565b925050602083013567ffffffffffffffff81111561383c5761383b613084565b5b613848858286016137c8565b9150509250929050565b600080604083850312156138695761386861307f565b5b6000613877858286016132cc565b9250506020613888858286016132cc565b9150509250929050565b600080604083850312156138a9576138a861307f565b5b60006138b785828601613217565b92505060206138c885828601613217565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061391957607f821691505b60208210810361392c5761392b6138d2565b5b50919050565b6000606082019050613947600083018661328b565b6139546020830185613321565b613961604083018461328b565b949350505050565b600081905092915050565b50565b6000613984600083613969565b915061398f82613974565b600082019050919050565b60006139a582613977565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139e9826131f6565b91506139f4836131f6565b9250828201905080821115613a0c57613a0b6139af565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a4c826131f6565b9150613a57836131f6565b9250828203905081811115613a6f57613a6e6139af565b5b92915050565b600081905092915050565b6000613a8b82613144565b613a958185613a75565b9350613aa5818560208601613160565b80840191505092915050565b6000613abd8285613a80565b9150613ac98284613a80565b91508190509392505050565b6000606082019050613aea600083018661328b565b613af7602083018561328b565b613b046040830184613321565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000613b3382613b0c565b613b3d8185613b17565b9350613b4d818560208601613160565b613b568161318a565b840191505092915050565b6000608082019050613b76600083018761328b565b613b83602083018661328b565b613b906040830185613321565b8181036060830152613ba28184613b28565b905095945050505050565b600081519050613bbc816130b5565b92915050565b600060208284031215613bd857613bd761307f565b5b6000613be684828501613bad565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c14565b613c5b8683613c14565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613c98613c93613c8e846131f6565b613c73565b6131f6565b9050919050565b6000819050919050565b613cb283613c7d565b613cc6613cbe82613c9f565b848454613c21565b825550505050565b600090565b613cdb613cce565b613ce6818484613ca9565b505050565b5b81811015613d0a57613cff600082613cd3565b600181019050613cec565b5050565b601f821115613d4f57613d2081613bef565b613d2984613c04565b81016020851015613d38578190505b613d4c613d4485613c04565b830182613ceb565b50505b505050565b600082821c905092915050565b6000613d7260001984600802613d54565b1980831691505092915050565b6000613d8b8383613d61565b9150826002028217905092915050565b613da482613144565b67ffffffffffffffff811115613dbd57613dbc6135a7565b5b613dc78254613901565b613dd2828285613d0e565b600060209050601f831160018114613e055760008415613df3578287015190505b613dfd8582613d7f565b865550613e65565b601f198416613e1386613bef565b60005b82811015613e3b57848901518255600182019150602085019450602081019050613e16565b86831015613e585784890151613e54601f891682613d61565b8355505b6001600288020188555050505b505050505050565b6000604082019050613e826000830185613321565b613e8f602083018461311a565b9392505050565b6000604082019050613eab600083018561328b565b613eb86020830184613321565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220b9229fd6beee6e7be04b0029941cc6e841b667ba7ab30e59217e08e84ae2eb7b64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806382862abe116100b6578063c87b56dd1161006f578063c87b56dd1461045a578063df73106614610497578063e13d899c146104c7578063e985e9c5146104f2578063ebddf9d71461052f578063edf7cf9b1461054b57610140565b806382862abe1461035c57806395d89b4114610387578063a22cb465146103b2578063a4ee9afd146103db578063b88d4fde14610406578063b9affbce1461042f57610140565b806323b872dd1161010857806323b872dd1461023e57806342842e0e146102675780635b9d252d146102905780636352211e146102b957806370a08231146102f65780637c726b691461033357610140565b806301ffc9a71461014557806306fdde0314610182578063081812fc146101ad578063095ea7b3146101ea57806312e8558514610213575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906130e1565b61057b565b6040516101799190613129565b60405180910390f35b34801561018e57600080fd5b506101976105dc565b6040516101a491906131d4565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061322c565b61066e565b6040516101e1919061329a565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906132e1565b61068a565b005b34801561021f57600080fd5b506102286106a0565b6040516102359190613330565b60405180910390f35b34801561024a57600080fd5b506102656004803603810190610260919061334b565b6106aa565b005b34801561027357600080fd5b5061028e6004803603810190610289919061334b565b6107ac565b005b34801561029c57600080fd5b506102b760048036038101906102b2919061322c565b6107cc565b005b3480156102c557600080fd5b506102e060048036038101906102db919061322c565b610ace565b6040516102ed919061329a565b60405180910390f35b34801561030257600080fd5b5061031d6004803603810190610318919061339e565b610ae0565b60405161032a9190613330565b60405180910390f35b34801561033f57600080fd5b5061035a6004803603810190610355919061322c565b610b9a565b005b34801561036857600080fd5b50610371610c63565b60405161037e919061350f565b60405180910390f35b34801561039357600080fd5b5061039c610f77565b6040516103a991906131d4565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d4919061355d565b611009565b005b3480156103e757600080fd5b506103f061101f565b6040516103fd9190613330565b60405180910390f35b34801561041257600080fd5b5061042d600480360381019061042891906136d2565b611029565b005b34801561043b57600080fd5b50610444611046565b604051610451919061350f565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c919061322c565b6112ad565b60405161048e91906131d4565b60405180910390f35b6104b160048036038101906104ac91906137f6565b6113c0565b6040516104be9190613330565b60405180910390f35b3480156104d357600080fd5b506104dc6115c8565b6040516104e9919061350f565b60405180910390f35b3480156104fe57600080fd5b5061051960048036038101906105149190613852565b6118dc565b6040516105269190613129565b60405180910390f35b6105496004803603810190610544919061322c565b611970565b005b61056560048036038101906105609190613892565b611e42565b6040516105729190613330565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d557506105d482611f16565b5b9050919050565b6060600080546105eb90613901565b80601f016020809104026020016040519081016040528092919081815260200182805461061790613901565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050905090565b600061067982611ff8565b5061068382612080565b9050919050565b61069c82826106976120bd565b6120c5565b5050565b6000600954905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361071c5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610713919061329a565b60405180910390fd5b6000610730838361072b6120bd565b6120d7565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107a6578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161079d93929190613932565b60405180910390fd5b50505050565b6107c783838360405180602001604052806000815250611029565b505050565b3373ffffffffffffffffffffffffffffffffffffffff166107ec82610ace565b73ffffffffffffffffffffffffffffffffffffffff1614610839576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600115158160800151151503610978576040517f27a8bf7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600a600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600954604051610a459061399a565b60006040518083038185875af1925050503d8060008114610a82576040519150601f19603f3d011682016040523d82523d6000602084013e610a87565b606091505b505090506000151581151503610ac9576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000610ad982611ff8565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b535760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610b4a919061329a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1f576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008111610c59576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060098190555050565b6060600080600190505b600754811015610d315760001515600a600083815260200190815260200160002060040160009054906101000a900460ff161515148015610d0f57503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610d2457600182610d2191906139de565b91505b8080600101915050610c6d565b506000808267ffffffffffffffff811115610d4f57610d4e6135a7565b5b604051908082528060200260200182016040528015610d8857816020015b610d75613018565b815260200190600190039081610d6d5790505b5090506000600190505b600754811015610f6d5760001515600a600083815260200190815260200160002060040160009054906101000a900460ff161515148015610e3457503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610f6057600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050828481518110610f4557610f44613a12565b5b6020026020010181905250600183610f5d91906139de565b92505b8080600101915050610d92565b5080935050505090565b606060018054610f8690613901565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb290613901565b8015610fff5780601f10610fd457610100808354040283529160200191610fff565b820191906000526020600020905b815481529060010190602001808311610fe257829003601f168201915b5050505050905090565b61101b6110146120bd565b83836122f1565b5050565b6000600854905090565b6110348484846106aa565b61104084848484612460565b50505050565b60606000600854600160075461105c9190613a41565b6110669190613a41565b905060008167ffffffffffffffff811115611084576110836135a7565b5b6040519080825280602002602001820160405280156110bd57816020015b6110aa613018565b8152602001906001900390816110a25790505b509050600080600190505b6007548110156112a35760001515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561116a57503073ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561129657600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505083838151811061127b5761127a613a12565b5b602002602001018190525060018261129391906139de565b91505b80806001019150506110c8565b5081935050505090565b60606112b882611ff8565b5060006006600084815260200190815260200160002080546112d990613901565b80601f016020809104026020016040519081016040528092919081815260200182805461130590613901565b80156113525780601f1061132757610100808354040283529160200191611352565b820191906000526020600020905b81548152906001019060200180831161133557829003601f168201915b505050505090506000611363612617565b905060008151036113785781925050506113bb565b6000825111156113ad578082604051602001611395929190613ab1565b604051602081830303815290604052925050506113bb565b6113b68461262e565b925050505b919050565b60006009543410156113fe576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008311611438576040517f329c1f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61144433600754612697565b611450600754836126b5565b6040518060a0016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160011515815250600a600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600160075461159291906139de565b6007819055506115b160016007546115aa9190613a41565b8433612711565b60016007546115c09190613a41565b905092915050565b6060600080600190505b6007548110156116965760011515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561167457503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156116895760018261168691906139de565b91505b80806001019150506115d2565b506000808267ffffffffffffffff8111156116b4576116b36135a7565b5b6040519080825280602002602001820160405280156116ed57816020015b6116da613018565b8152602001906001900390816116d25790505b5090506000600190505b6007548110156118d25760011515600a600083815260200190815260200160002060040160009054906101000a900460ff16151514801561179957503373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156118c557600a60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250508284815181106118aa576118a9613a12565b5b60200260200101819052506001836118c291906139de565b92505b80806001019150506116f7565b5080935050505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff16611990826128f1565b73ffffffffffffffffffffffffffffffffffffffff16036119dd576040517ff840540400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600115158160800151151503611b1c576040517f27a8bf7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060600151341015611b5a576040517f3015947c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133856040518463ffffffff1660e01b8152600401611bca93929190613ad5565b600060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506001600854611c0b91906139de565b60088190555060008160200151905033600a600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600954604051611d0d9061399a565b60006040518083038185875af1925050503d8060008114611d4a576040519150601f19603f3d011682016040523d82523d6000602084013e611d4f565b606091505b505090506000151581151503611d91576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1634604051611db79061399a565b60006040518083038185875af1925050503d8060008114611df4576040519150601f19603f3d011682016040523d82523d6000602084013e611df9565b606091505b505090506000151581151503611e3b576040517f2e5ccf2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16611e6484610ace565b73ffffffffffffffffffffffffffffffffffffffff1614611eb1576040517f49731c3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600954341015611eed576040517f4a9d022e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ef8838333612711565b6001600854611f079190613a41565b60088190555082905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611fe157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611ff15750611ff08261292e565b5b9050919050565b600080612004836128f1565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361207757826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161206e9190613330565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6120d28383836001612998565b505050565b6000806120e3846128f1565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461212557612124818486612b5d565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146121b657612167600085600080612998565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612239576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361236257816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401612359919061329a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124539190613129565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612611578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026124a46120bd565b8685856040518563ffffffff1660e01b81526004016124c69493929190613b61565b6020604051808303816000875af192505050801561250257506040513d601f19601f820116820180604052508101906124ff9190613bc2565b60015b612586573d8060008114612532576040519150601f19603f3d011682016040523d82523d6000602084013e612537565b606091505b50600081510361257e57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612575919061329a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461260f57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612606919061329a565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b606061263982611ff8565b506000612644612617565b90506000815111612664576040518060200160405280600081525061268f565b8061266e84612c21565b60405160200161267f929190613ab1565b6040516020818303038152906040525b915050919050565b6126b1828260405180602001604052806000815250612cef565b5050565b806006600084815260200190815260200160002090816126d59190613d9b565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516127059190613330565b60405180910390a15050565b6000821161274b576040517f329c1f1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808481526020018273ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600a60008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050612883308461068a565b813073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb640004f1d14576d0c209e240cad0410e0d8c0c33a09375861fbadae2588a98d8660006040516128e4929190613e6d565b60405180910390a4505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b80806129d15750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612b055760006129e184611ff8565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612a4c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612a5f5750612a5d81846118dc565b155b15612aa157826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612a98919061329a565b60405180910390fd5b8115612b0357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612b68838383612d0b565b612c1c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612bdd57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612bd49190613330565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612c13929190613e96565b60405180910390fd5b505050565b606060006001612c3084612dcc565b01905060008167ffffffffffffffff811115612c4f57612c4e6135a7565b5b6040519080825280601f01601f191660200182016040528015612c815781602001600182028036833780820191505090505b509050600082602001820190505b600115612ce4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cd857612cd7613ebf565b5b04945060008503612c8f575b819350505050919050565b612cf98383612f1f565b612d066000848484612460565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612dc357508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612d845750612d8384846118dc565b5b80612dc257508273ffffffffffffffffffffffffffffffffffffffff16612daa83612080565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612e2a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612e2057612e1f613ebf565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612e67576d04ee2d6d415b85acef81000000008381612e5d57612e5c613ebf565b5b0492506020810190505b662386f26fc100008310612e9657662386f26fc100008381612e8c57612e8b613ebf565b5b0492506010810190505b6305f5e1008310612ebf576305f5e1008381612eb557612eb4613ebf565b5b0492506008810190505b6127108310612ee4576127108381612eda57612ed9613ebf565b5b0492506004810190505b60648310612f075760648381612efd57612efc613ebf565b5b0492506002810190505b600a8310612f16576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612f915760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612f88919061329a565b60405180910390fd5b6000612f9f838360006120d7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146130135760006040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161300a919061329a565b60405180910390fd5b505050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130be81613089565b81146130c957600080fd5b50565b6000813590506130db816130b5565b92915050565b6000602082840312156130f7576130f661307f565b5b6000613105848285016130cc565b91505092915050565b60008115159050919050565b6131238161310e565b82525050565b600060208201905061313e600083018461311a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317e578082015181840152602081019050613163565b60008484015250505050565b6000601f19601f8301169050919050565b60006131a682613144565b6131b0818561314f565b93506131c0818560208601613160565b6131c98161318a565b840191505092915050565b600060208201905081810360008301526131ee818461319b565b905092915050565b6000819050919050565b613209816131f6565b811461321457600080fd5b50565b60008135905061322681613200565b92915050565b6000602082840312156132425761324161307f565b5b600061325084828501613217565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328482613259565b9050919050565b61329481613279565b82525050565b60006020820190506132af600083018461328b565b92915050565b6132be81613279565b81146132c957600080fd5b50565b6000813590506132db816132b5565b92915050565b600080604083850312156132f8576132f761307f565b5b6000613306858286016132cc565b925050602061331785828601613217565b9150509250929050565b61332a816131f6565b82525050565b60006020820190506133456000830184613321565b92915050565b6000806000606084860312156133645761336361307f565b5b6000613372868287016132cc565b9350506020613383868287016132cc565b925050604061339486828701613217565b9150509250925092565b6000602082840312156133b4576133b361307f565b5b60006133c2848285016132cc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613400816131f6565b82525050565b61340f81613279565b82525050565b61341e8161310e565b82525050565b60a08201600082015161343a60008501826133f7565b50602082015161344d6020850182613406565b5060408201516134606040850182613406565b50606082015161347360608501826133f7565b5060808201516134866080850182613415565b50505050565b60006134988383613424565b60a08301905092915050565b6000602082019050919050565b60006134bc826133cb565b6134c681856133d6565b93506134d1836133e7565b8060005b838110156135025781516134e9888261348c565b97506134f4836134a4565b9250506001810190506134d5565b5085935050505092915050565b6000602082019050818103600083015261352981846134b1565b905092915050565b61353a8161310e565b811461354557600080fd5b50565b60008135905061355781613531565b92915050565b600080604083850312156135745761357361307f565b5b6000613582858286016132cc565b925050602061359385828601613548565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135df8261318a565b810181811067ffffffffffffffff821117156135fe576135fd6135a7565b5b80604052505050565b6000613611613075565b905061361d82826135d6565b919050565b600067ffffffffffffffff82111561363d5761363c6135a7565b5b6136468261318a565b9050602081019050919050565b82818337600083830152505050565b600061367561367084613622565b613607565b905082815260208101848484011115613691576136906135a2565b5b61369c848285613653565b509392505050565b600082601f8301126136b9576136b861359d565b5b81356136c9848260208601613662565b91505092915050565b600080600080608085870312156136ec576136eb61307f565b5b60006136fa878288016132cc565b945050602061370b878288016132cc565b935050604061371c87828801613217565b925050606085013567ffffffffffffffff81111561373d5761373c613084565b5b613749878288016136a4565b91505092959194509250565b600067ffffffffffffffff8211156137705761376f6135a7565b5b6137798261318a565b9050602081019050919050565b600061379961379484613755565b613607565b9050828152602081018484840111156137b5576137b46135a2565b5b6137c0848285613653565b509392505050565b600082601f8301126137dd576137dc61359d565b5b81356137ed848260208601613786565b91505092915050565b6000806040838503121561380d5761380c61307f565b5b600061381b85828601613217565b925050602083013567ffffffffffffffff81111561383c5761383b613084565b5b613848858286016137c8565b9150509250929050565b600080604083850312156138695761386861307f565b5b6000613877858286016132cc565b9250506020613888858286016132cc565b9150509250929050565b600080604083850312156138a9576138a861307f565b5b60006138b785828601613217565b92505060206138c885828601613217565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061391957607f821691505b60208210810361392c5761392b6138d2565b5b50919050565b6000606082019050613947600083018661328b565b6139546020830185613321565b613961604083018461328b565b949350505050565b600081905092915050565b50565b6000613984600083613969565b915061398f82613974565b600082019050919050565b60006139a582613977565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139e9826131f6565b91506139f4836131f6565b9250828201905080821115613a0c57613a0b6139af565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a4c826131f6565b9150613a57836131f6565b9250828203905081811115613a6f57613a6e6139af565b5b92915050565b600081905092915050565b6000613a8b82613144565b613a958185613a75565b9350613aa5818560208601613160565b80840191505092915050565b6000613abd8285613a80565b9150613ac98284613a80565b91508190509392505050565b6000606082019050613aea600083018661328b565b613af7602083018561328b565b613b046040830184613321565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000613b3382613b0c565b613b3d8185613b17565b9350613b4d818560208601613160565b613b568161318a565b840191505092915050565b6000608082019050613b76600083018761328b565b613b83602083018661328b565b613b906040830185613321565b8181036060830152613ba28184613b28565b905095945050505050565b600081519050613bbc816130b5565b92915050565b600060208284031215613bd857613bd761307f565b5b6000613be684828501613bad565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c14565b613c5b8683613c14565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613c98613c93613c8e846131f6565b613c73565b6131f6565b9050919050565b6000819050919050565b613cb283613c7d565b613cc6613cbe82613c9f565b848454613c21565b825550505050565b600090565b613cdb613cce565b613ce6818484613ca9565b505050565b5b81811015613d0a57613cff600082613cd3565b600181019050613cec565b5050565b601f821115613d4f57613d2081613bef565b613d2984613c04565b81016020851015613d38578190505b613d4c613d4485613c04565b830182613ceb565b50505b505050565b600082821c905092915050565b6000613d7260001984600802613d54565b1980831691505092915050565b6000613d8b8383613d61565b9150826002028217905092915050565b613da482613144565b67ffffffffffffffff811115613dbd57613dbc6135a7565b5b613dc78254613901565b613dd2828285613d0e565b600060209050601f831160018114613e055760008415613df3578287015190505b613dfd8582613d7f565b865550613e65565b601f198416613e1386613bef565b60005b82811015613e3b57848901518255600182019150602085019450602081019050613e16565b86831015613e585784890151613e54601f891682613d61565b8355505b6001600288020188555050505b505050505050565b6000604082019050613e826000830185613321565b613e8f602083018461311a565b9392505050565b6000604082019050613eab600083018561328b565b613eb86020830184613321565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220b9229fd6beee6e7be04b0029941cc6e841b667ba7ab30e59217e08e84ae2eb7b64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 201,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 203,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 207,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 211,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 215,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 221,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1340,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2984,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2986,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_soldNfts",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2988,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "listingPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2993,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "tokenIdToMarketItem",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(MarketItem)3017_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketItem)3017_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketPlace.MarketItem)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketItem)3017_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MarketItem)3017_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketPlace.MarketItem",
        "members": [
          {
            "astId": 3008,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3010,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3012,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3014,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3016,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}